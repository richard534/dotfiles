* Init.el
#+BEGIN_SRC emacs-lisp
;;; init.el.org --- my emacs configuration -*- lexical-binding: t; -*-
#+END_SRC
** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
** Language and encoding
Add UTF-8 to the front of the priority list for automatic detection
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC
Set up mulilingual environment to use UTF-8
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC
Set default value of various coding systems to UTF-8
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
#+END_SRC
** Emacs UI
Disable gui toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
Disable mac menubar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
Disable scrollbar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC
Prevent the cursor from blinking
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
Initial scratch message
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC
Disable startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
Don't let Emacs hurt your ears
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC
Overwrite default emacs startup message
#+BEGIN_SRC emacs-lisp
(defun display-startup-echo-area-message ()
  (message nil))
#+END_SRC
Number of lines to scroll when reach top/bottom of window
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
#+END_SRC
turn off all alarms (flashing bottom of screen, audible)
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
set left fringe width - prevent vertical splits hiding diff-hl
#+BEGIN_SRC emacs-lisp
;; (setq-default left-fringe-width 16)
#+END_SRC
Remove icons/text from title bar (transparent title bar)
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; assuming you are using a dark theme
(setq ns-use-proxy-icon nil)
(setq frame-title-format
      `((buffer-file-name "%f" "%b")
        ,(format " - GNU Emacs %s" emacs-version)))
#+END_SRC
** Theme
Enable doom theme
#+BEGIN_SRC emacs-lisp
; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

; Load the theme (doom-one, doom-molokai, etc)
(load-theme 'doom-vibrant t)
; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
; overload doom-themes "selected region" color
(set-face-attribute 'region nil :background "#666")
#+END_SRC
** Font
Set default font
#+BEGIN_SRC emacs-lisp
(set-default-font "Source Code Pro 14")
#+END_SRC
** Tabs
Pressing tab will produce spaces instead of tab chars
#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode nil)
#+END_SRC
make TAB insert tabulation/spaces instead of indenting
#+begin_src emacs-lisp
(setq tab-always-indent nil)
#+end_src
** Word wrapping
Word wrapping mode hooks
#+BEGIN_SRC emacs-lisp
; Text mode
(add-hook 'prog-mode-hook '(lambda ()
    (visual-line-mode -1)
    (setq truncate-lines t
          word-wrap nil)))

; Programming mode
(add-hook 'text-mode-hook '(lambda ()
    (setq truncate-lines nil
          word-wrap t)))
#+END_SRC
** Misc Text Editor Settings
Set lines to wrap at certain char limit
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 120)
#+END_SRC
Delete trailing whitespace on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
Insert newline at the end of all files - if not already present
#+BEGIN_SRC emacs-lisp
(setq-default require-final-newline t)
#+END_SRC
** Backup
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("~/.emacs-saves")))
(setq version-control t     ;; Use version numbers for backups.
      kept-new-versions 10  ;; Number of newest versions to keep.
      kept-old-versions 0   ;; Number of oldest versions to keep.
      delete-old-versions t ;; Don't ask to delete excess backup versions.
      backup-by-copying t)  ;; Copy all files, don't rename them.

(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC
** Custom
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC
** Info
#+BEGIN_SRC emacs-lisp
(use-package info
  :after evil-collection
  :config
  (evil-collection-info-setup))
#+END_SRC
** Exec-path-from-shell
Copies specified environment variables from the users shell to the emacs environment
Necessary when using MacOS
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :init
  (setq exec-path-from-shell-variables
        '("PATH"
          "MANPATH"))
  (setq exec-path-from-shell-check-startup-files nil) ; Hide warning message about environment variables
  (exec-path-from-shell-initialize))
#+END_SRC

Focus on emacs session when opening emacs gui
#+BEGIN_SRC emacs-lisp
(when (featurep 'ns)
  (defun ns-raise-emacs ()
    "Raise Emacs."
    (ns-do-applescript "tell application \"Emacs\" to activate"))

  (defun ns-raise-emacs-with-frame (frame)
    "Raise Emacs and select the provided frame."
    (with-selected-frame frame
      (when (display-graphic-p)
        (ns-raise-emacs))))

  (add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)

  (when (display-graphic-p)
    (ns-raise-emacs)))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; configure evil before loading it
  ;; Variables required by evil-collection
  (setq evil-want-integration t) ; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)

  ; set evil search implementation to internal evil-search (instead of isearch)
  (setq evil-search-module 'evil-search)

  ; When visual-selecting to end of line ($), select until end of line - not whole line
  (setq evil-want-visual-char-semi-exclusive t)

  ; disable evil auto indent
  (setq evil-auto-indent nil)

  :config ;; configure evil after loading it
  (evil-mode 1)

  ;; Unbind evil keys (for use elsewhere)
  (define-key evil-normal-state-map (kbd "C-n") nil)
  (define-key evil-insert-state-map (kbd "C-n") nil)
  (define-key evil-normal-state-map (kbd "C-p") nil)
  (define-key evil-insert-state-map (kbd "C-p") nil)

  ; Rebind keys for vim-like crtl-u pgUp
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up) ; Motion state is an Evil-specific thing, intended for modes where you don't edit text. E.g help buffers

  ; Rebind keys for moving between windows
  (define-key evil-normal-state-map (kbd "C-h") #'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") #'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") #'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") #'evil-window-right)

  ; Rebind keys for resizing windows
  (define-key evil-normal-state-map (kbd "M-k") #'evil-window-increase-height)
  (define-key evil-normal-state-map (kbd "M-j") #'evil-window-decrease-height)
  (define-key evil-normal-state-map (kbd "M-l") #'evil-window-increase-width)
  (define-key evil-normal-state-map (kbd "M-h") #'evil-window-decrease-width)

  ; Rebind move window keys
  (define-key evil-normal-state-map (kbd "C-S-k") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-S-j") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-S-h") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-S-l") 'buf-move-right)

  ; Goto git hunks
  (define-key evil-normal-state-map "g]" `diff-hl-next-hunk)
  (define-key evil-normal-state-map "g[" `diff-hl-previous-hunk)
  ; Add goto git hunks to evil jump-list (allows crtl-o/i navigation between git-hunk commands)
  (evil-add-command-properties #'diff-hl-next-hunk :jump t)
  (evil-add-command-properties #'diff-hl-previous-hunk :jump t)

  ; configure evil cursor
  (setq evil-emacs-state-cursor '("red" box))
  (setq evil-normal-state-cursor '("green" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("red" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("red" hollow))

  ;; Select all keybind
  (fset 'select-all
     "ggVG")
  (define-key evil-normal-state-map (kbd "C-a") 'select-all)

  ;; Bind evil ex-commands
  ; Bind evil ex-command to open init file
  (evil-ex-define-cmd "init" #'find-emacs-init-file)
  (evil-ex-define-cmd "reload" #'reload-init-file)
  ; :q deletes window - keeps buffer
  (evil-ex-define-cmd "q" 'delete-window)
  ; :quit closes emacs
  (evil-ex-define-cmd "quit" 'save-buffers-kill-emacs)
  ; vs vertically splits window
  (evil-ex-define-cmd "vs" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  ; sp horizontally splits window
  (evil-ex-define-cmd "sp" (lambda () (interactive)(split-window-vertically) (other-window 1)))

  ;; Add commands to evil jump-list
  (evil-add-command-properties #'anzu-query-replace-at-cursor :jump t)
  (evil-add-command-properties #'projectile-replace :jump t))
#+END_SRC
** Evil-collection
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after (evil)
  :ensure t)
#+END_SRC
** Evil-escape
#+BEGIN_SRC emacs-lisp
(use-package evil-escape
  :ensure t
  :diminish evil-escape-mode
  :init
  (setq-default evil-escape-key-sequence "jk")
  (setq-default evil-escape-delay 0.2)
  :config
  (evil-escape-mode t))
#+END_SRC
** Evil-leader
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "<SPC>" 'counsel-M-x
    "r" `anzu-query-replace-at-cursor ; buffer-wide find/replace
    "R"  `projectile-replace ; project-wide find/replace
    "is" `yas-insert-snippet ; insert snippet
    "fd" `magit-file-dispatch ; file-dispatch (magit command)
    "[" `winner-undo
    "]" `winner-redo
    "fj" `json-pretty-print
    "fJ" `json-pretty-print-buffer
    "sl" 'elpy-shell-clear-shell

    ;; Text (x)
    ; Inflection (i)
    "xii"  `string-inflection-all-cycle
    "xiu" 'string-inflection-underscore
    "xiU" 'string-inflection-upcase
    "xik" 'string-inflection-kebab-case
    "xic" 'string-inflection-lower-camelcase
    "xiC" 'string-inflection-camelcas

    ;; Region narrowing (n)
    "nr" 'narrow-to-region
    "np" 'narrow-to-page
    "nf" 'narrow-to-defun
    "nw" 'widen

    ;; File (f)
    ; rename file and buffer
    "fR" 'rename-file-and-buffer

    ;; Buffers (b)
    "bd" 'kill-this-buffer
    "bn" 'next-buffer
    "bp" 'previous-buffer
    "bR" 'revert-buffer-no-confirm
    "bw" 'read-only-mode
    "bb" 'ivy-switch-buffer
    "bx" 'kill-buffer-and-window ; buffer - kill

    ;; GUI Toggles (t)
    "tl" 'toggle-truncate-lines
    "tL" 'visual-line-mode
    "tn" 'display-line-numbers-mode

    ;; evil-nerd-commenter (c)
    "ci" 'evilnc-comment-or-uncomment-lines
    "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
    "cc" 'evilnc-copy-and-comment-lines
    "cp" 'evilnc-comment-or-uncomment-paragraphs
    "cr" 'comment-or-uncomment-region
    "cv" 'evilnc-toggle-invert-comment-line-by-line
    "."  'evilnc-copy-and-comment-operator))
#+END_SRC
** Evil-magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit)
#+END_SRC
** Evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC
** Evil-number
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers
  :ensure t
  :init
  (global-set-key (kbd "C-=") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "C--") 'evil-numbers/dec-at-pt))
#+END_SRC
** Evil-visualstar
#+BEGIN_SRC emacs-lisp
(use-package evil-visualstar
  :ensure t
  :after evil
  :init
  (global-evil-visualstar-mode))
#+END_SRC
** Evil-anzu
#+BEGIN_SRC emacs-lisp
(use-package evil-anzu
  :ensure t
  :after evil)
#+END_SRC
** Anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :diminish anzu-mode
  :init
  (global-anzu-mode +1)
  (setq anzu-search-threshold 1000
    anzu-cons-mode-line-p nil))
#+END_SRC
** Help
#+BEGIN_SRC emacs-lisp
(use-package help
  :after evil-collection
  :init
  (setq help-window-select t) ; Always select (focus on) the help window when opened
  :config
  ;; Help-mode related keybindings
  (evil-collection-help-setup)
  (evil-leader/set-key "hdb" 'describe-bindings)
  (evil-leader/set-key "hdf" 'describe-function)
  (evil-leader/set-key "hdv" 'describe-variable)
  (evil-leader/set-key "hdk" 'describe-key)
  (evil-leader/set-key "hdp" 'describe-package)
  (evil-leader/set-key "hdm" 'describe-mode))
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
; Enable line numbers only in modes that inherit prog-mode (programming mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode 1)
; groovy-mode-hook doesn't seem to inherit prog-mode - defining seperately
(add-hook 'groovy-mode-hook 'display-line-numbers-mode 1)
#+END_SRC
** Package
#+BEGIN_SRC emacs-lisp
(use-package package
  :config
  ; Evilify keybinds
  (evil-add-hjkl-bindings package-menu-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "?")       'evil-search-backward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "gg")      'evil-goto-first-line
    (kbd "gb")      'counsel-switch-buffer
    (kbd "G")       'evil-goto-line
    (kbd "^")       'evil-first-non-blank))
#+END_SRC
** Electric
Auto-complete pairs of brackets/quotes etc.
#+BEGIN_SRC emacs-lisp
(setq electric-pair-preserve-balance nil)
#+END_SRC
Disabled "electric indent mode" - breaks some modes inc. python
#+BEGIN_SRC emacs-lisp
(electric-indent-mode -1)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :after evil-collection
  :config
  (evil-collection-dired-setup))
#+END_SRC
** Vc
#+begin_src emacs-lisp
(use-package vc
  :init
  (setq auto-revert-check-vc-info t))
#+end_src
** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish eldoc-mode)
#+END_SRC
** Auto revert
Emacs auto-reloads buffers when files change on disk.
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode)
#+END_SRC
** Saveplace
Remember cursor position of files when reopening them
#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC
** Winner
enable winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Abbrev
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :diminish abbrev-mode)
#+END_SRC
** Emacs Server
start emacs-server (for use with emacsclient)
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq org-indent-mode t)
(with-eval-after-load 'org-indent (diminish `org-indent-mode))
(setq org-hide-leading-stars t) ; hide orgmode heading stars
(setq org-adapt-indentation nil) ; hide orgmode heading indented stars
(setq org-hide-emphasis-markers t) ; hide bold bullet points etc
(setq org-src-preserve-indentation t) ; preserve leading whitespace on export (prevents adding leading spaces to editied blocks)
(setq org-cycle-include-plain-lists 'integrate) ; When running org-cycle plain list items will be treated like low-level headlines (will cycle)
(setq org-M-RET-may-split-line '((item . nil))) ; in the context of a list of items; goto eol before making a new line
(setq org-confirm-babel-evaluate nil) ; Disable asking for confirmation when executing babel code block for all languages

; Configure org-goto
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

org-mode images config
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t) ; Show inline images by default
(setq org-image-actual-width nil) ; try to get the width from an #+ATTR.* keyword and fall back on the original width if none is found.
#+END_SRC

Custom json babel code-bock type 'json'
Will just return its contents (passthrough) when evaluated
#+BEGIN_SRC emacs-lisp
;;; ob-passthrough.el ---  passthrough evaluator          -*- lexical-binding: t; -*-
(require 'ob)
(defun org-babel-execute:passthrough (body params)
  body)
;; json output is json
(defalias 'org-babel-execute:json 'org-babel-execute:passthrough)
(provide 'ob-passthrough)
;;; ob-passthrough.el ends here
#+END_SRC

Load org-babel languages
#+BEGIN_SRC emacs-lisp
; add python to org-mode babel (allows executing python code in org files src blocks)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (shell . t)
   (passthrough . t)))
#+END_SRC

Evil-leader org-mode specific bindings
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode
    'org-mode
        "m'" 'org-edit-special
        "mt" 'org-todo
        "m," 'org-ctrl-c-ctrl-c
        "mee" 'org-export-dispatch
        "mit" 'org-toggle-inline-images
        "mbm" 'org-babel-mark-block
        "mbt" 'org-babel-tangle
        "mn" 'org-narrow-to-subtree
        "mN" 'widen)
#+END_SRC

Add buffer-local before-save-hook that will update org-mode checkboxes
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
    (add-hook 'before-save-hook 'org-update-checkbox-count nil 'make-it-local)))
#+end_src

*** Custom org-mode functions
Hide substrees in selected region
#+BEGIN_SRC emacs-lisp
(defun org-hide-subtrees-in-region (beg end)
  (interactive "r")
  (outline-hide-region-body beg end))
#+END_SRC
** Org-download
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t)
#+END_SRC
** Org-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t
  :init
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (evil-leader/set-key "mert" 'toggle-org-reveal-html-export-on-save)
  (evil-leader/set-key "merT" 'toggle-org-reveal-current-subtree-html-export-on-save)
  (evil-leader/set-key "merc" 'org-reveal-export-current-subtree)
  (evil-leader/set-key "merb" 'org-reveal-export-to-html-and-browse))
#+end_src
** Evil-org
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
            (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point))
#+END_SRC
** Edit-indirect
#+BEGIN_SRC emacs-lisp
(use-package edit-indirect
  :ensure t
  :config
  (evil-leader/set-key "m'" 'edit-indirect-region)

  ; When in edit-indirect buffer, override wq to commit edit-indirect buffer
  (defun my-evil-save-and-close (old-fun &rest args)
    (if edit-indirect--overlay
      (edit-indirect-commit)
      (apply old-fun args)))
  (advice-add #'evil-save-and-close :around #'my-evil-save-and-close)

  ; When in edit-indirect buffer, override q to abort edit-indirect buffer
  (defun my_delete-window (old-fun &rest args)
    (if edit-indirect--overlay
      (edit-indirect-abort)
      (apply old-fun args)))
  (advice-add #'delete-window :around #'my_delete-window))
#+END_SRC
** Comint
#+BEGIN_SRC emacs-lisp
(setq comint-scroll-to-bottom-on-output t)
#+END_SRC
** Xscheme
#+BEGIN_SRC emacs-lisp
; mit-scheme (sicp) setup
(setq scheme-program-name "/usr/local/bin/scheme")
(require 'xscheme)
#+END_SRC
** Emacs Desktop
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC
** Ediff
#+begin_src emacs-lisp
(use-package ediff
  :after evil-collection
  :init
  ; Only highlight current diff
  (setq-default ediff-highlight-all-diffs 'nil)

  ; Turn off whitespace checking
  (setq ediff-diff-options "-w")

  ; Prevent ediff opening seperate emacs window
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ; Bind evil-collection ediff keys
  (evil-collection-ediff-setup))
#+end_src
** Smerge
#+BEGIN_SRC emacs-lisp
(use-package smerge-mode
  :after hydra
  )
#+END_SRC
** Image
#+begin_src emacs-lisp
(use-package image-mode
  :after evil-collection
  :init
  (evil-collection-image-setup))
#+end_src
** Restart Emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t
  :config
  ; define evil ex command :restart to restarts emacs
  (evil-ex-define-cmd "restart" 'restart-emacs))
#+END_SRC
** Emojify
#+BEGIN_SRC emacs-lisp
(use-package emojify
  ; When using :hook omit the "-hook" suffix. This would normally look like "after-init-hook"
  :ensure t
  :hook (after-init . global-emojify-mode)
  :config
  (evil-leader/set-key "ie" 'emojify-insert-emoji))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :after evil
  :diminish which-key-mode
  :init
  (which-key-mode)
  :config
  (evil-leader/set-key "hk" 'which-key-show-top-level))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :init
  (projectile-mode +1)
  ; enable caching projectile results (used with helm-projectile-find-file)
  (setq projectile-enable-caching t)
  ; set projectile to just use VCS (e.g .gitignore) files during indexing
  (setq projectile-indexing-method 'alien)
  (setq projectile-mode-line "Projectile")
  ; Set ivy as projectile completion-engine
  (setq projectile-completion-system 'ivy)
  (evil-leader/set-key "pI" 'projectile-invalidate-cache))
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
(use-package smerge-mode
  :ensure t
  :after hydra
  ; Automatically open hydra-smerge/body
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (hydra-smerge/body))))
  :config
  (defhydra hydra-smerge
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))

  ; Mode-specifc evil keybinds
  (evil-define-minor-mode-key 'normal 'smerge-mode " gr" 'hydra-smerge/body))
#+END_SRC
** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :after evil-collection
  :diminish ivy-mode
  :init
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (evil-set-initial-state 'ivy-occur-grep-mode 'normal) ; Enable evil mode when entering an ivy-occur-grep-mode buffer
  (evil-collection-ivy-setup))
#+end_src
** Ivy-Hydra
#+begin_src emacs-lisp
(use-package ivy-hydra
  :ensure t)
#+end_src
** Wgrep
#+begin_src emacs-lisp
(use-package wgrep
  :ensure t
  :after evil-collection
  :init
  ; save buffer automatically when wgrep-finish-edit
  (setq wgrep-auto-save-buffer t)

  (evil-collection-wgrep-setup))
#+end_src
** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :diminish counsel-mode
  :init
  (counsel-mode 1)

  (setq counsel-switch-buffer-preview-virtual-buffers nil)

  ; Bind counsel evil-leader keys
  (evil-leader/set-key
    ;; Finding files
    "ff" 'counsel-find-file ; Current dir file search
    "fF" 'counsel-fzf ; Recursive file search

    ;;; Searching
    "sc" 'evil-ex-nohighlight ; clear highlights
    ;; Current file
    "sj" `counsel-jump-in-buffer ; mnemonic - search-jump (list all symbols in buffer)
    "ss" 'swiper
    "sS" 'swiper-region-or-symbol
    ;; Arbitrary directory
    "sf" 'counsel-rg
    "sF" 'counsel-rg-region-or-symbol
    ;; Open buffers
    "sb" 'swiper-all
    "sB" 'swiper-all-region-or-symbol

    ;; Misc
    "wb" 'switch-to-minibuffer-window
    "hm" 'woman))
#+end_src
** Counsel-projectile
#+begin_src emacs-lisp
(use-package counsel-projectile
  :ensure t
  :init
  (evil-leader/set-key
    "pb" 'counsel-projectile-switch-to-buffer
    "fp" 'counsel-projectile-find-file
    "pp" 'counsel-projectile-switch-project
    "sp" 'counsel-projectile-rg-nil-initial-input
    "sP" 'counsel-projectile-rg-region-or-symbol
    "pD" 'projectile-dired
    "pa" 'projectile-toggle-between-implementation-and-test))
#+end_src
** Iedit
#+begin_src emacs-lisp
(use-package iedit
  :ensure t
  :init
  (evil-leader/set-key
    "se" 'evil-iedit-state/iedit-mode))
#+end_src
** Expand-region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :init
  (evil-leader/set-key
    "v" 'er/expand-region)

  (setq expand-region-contract-fast-key "V"
        expand-region-reset-fast-key "r"))
#+end_src
** Evil-iedit-state
#+begin_src emacs-lisp
(use-package evil-iedit-state
  :ensure t
  :after (iedit evil))
#+end_src
** Smex
#+begin_src emacs-lisp
(use-package smex
  :ensure t)
#+end_src
** Dash-at-point
#+begin_src emacs-lisp
(use-package dash-at-point
  :ensure t
  :init
  ; Bind evil-leader keys
  (evil-leader/set-key
    "dd" 'dash-at-point))
#+end_src
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :bind (:map company-active-map
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next-or-abort)
          ("C-p" . company-select-previous-or-abort))
  :hook (after-init . global-company-mode)
  :init
  (setq company-idle-delay 0) ; No delay in showing suggestions.
  (setq company-minimum-prefix-length 1) ; Show suggestions after entering one character.
  (setq company-selection-wrap-around t)) ; once at bottom of suggestions - wrap back to top
#+END_SRC
** Company-restclient
#+begin_src emacs-lisp
(use-package company-restclient
  :ensure t
  :after company
  :init
  (add-to-list 'company-backends 'company-restclient))
#+end_src
** Highlight-Indent-Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :diminish highlight-indent-guides-mode
  :hook (prog-mode . highlight-indent-guides-mode)
  :init
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-responsive 'top))
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :after evil-collection
  :bind ("<f8>" . 'neotree-toggle)
  :config
  (evil-collection-neotree-setup) ; Bind evil-collection neotree keys
  (setq neo-window-fixed-size nil)
  (setq neo-theme 'arrow))
#+END_SRC
** Json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :init
  (setq json-reformat:indent-width 2))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :init (global-flycheck-mode)) ; flycheck only run if it finds a linter for the buffer language - enabling mode globally is OK
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure t
  :bind (:map inferior-python-mode-map
    ("C-h" . 'evil-window-left)
    ("C-j" . 'evil-window-down)
    ("C-k" . 'evil-window-up)
    ("C-l" . 'evil-window-right)))
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :after (evil python flycheck)
  :diminish elpy-mode
  :bind (:map evil-normal-state-map
         ("gd" . 'elpy-goto-definition))
  :defer t
  :init
  ; Defer loading elpy until python-mode loaded
  (advice-add 'python-mode :before 'elpy-enable)
  :config
  ; Set elpy backend
  (setq elpy-rpc-backend "jedi")
   ; Set elpy to use ipython as shell interpreter
  (setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "--simple-prompt -c exec('__import__(\\'readline\\')') -i")
   ; Config elpy to use flycheck instead of flymake
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  ; Disable "highlight-indentation" elpy module
  (setq elpy-modules (delete 'elpy-module-highlight-indentation elpy-modules))
  ; Bind evil-leader key to format code. mnemonic - format-code
  (evil-leader/set-key "fc" 'elpy-black-fix-code)
   ; custon fn to clear elpy shell
  (defun elpy-shell-clear-shell ()
    "Clear the current shell buffer."
    (interactive)
    (with-current-buffer (process-buffer (elpy-shell-get-or-create-process))
      (comint-clear-buffer))))
#+END_SRC
** Pyvenv
#+BEGIN_SRC emacs-lisp
; automatically restart inferior python process when python virtual environment changed
(add-hook 'pyvenv-post-activate-hooks 'pyvenv-restart-python)
#+END_SRC
** Hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  ; Bind hl-todo commands to evil keymap. Mnemonic - "goto todo"
  :bind (:map evil-normal-state-map
              ("gt]" . hl-todo-next)
              ("gt[" . hl-todo-previous))
  :init
  ; Add hl-todo next-prev commands to evil jump-list
  (evil-add-command-properties #'hl-todo-next :jump t)
  (evil-add-command-properties #'hl-todo-previous :jump t)
  (global-hl-todo-mode))
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :init
  (setq spaceline-highlight-face-func `spaceline-highlight-face-evil-state)
  :config
  (spaceline-emacs-theme))
#+END_SRC
** Diff-hl
#+BEGIN_SRC emacs-lisp
(global-diff-hl-mode)
#+END_SRC
set diff-hl to work with unsaved buffers too
#+BEGIN_SRC emacs-lisp
(diff-hl-flydiff-mode t)
#+END_SRC
** Origami
#+BEGIN_SRC emacs-lisp
(use-package origami
  :ensure t
  :hook (prog-mode . origami-mode))
#+END_SRC
** Terraform
#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :ensure t)
#+END_SRC
** Editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :diminish editorconfig-mode
  :config
  (editorconfig-mode 1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (evil-leader/set-key
    "gs" 'magit-status
    "gm" 'magit-dispatch)
  :config
  ; st opens magit status
  (evil-ex-define-cmd "st" 'magit-status)

  ; magit disables git-clean default - this enables it
  (put 'magit-clean 'disabled nil)

  ; don't prompt for confirmation when staging all changes
  (add-to-list 'magit-no-confirm 'stage-all-changes)

  ; integrate magit with diff-hl - refresh changes on refresh
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  ; Custom fn to invalidate projectile cache on magit checkout
  (defun run-projectile-invalidate-cache (&rest _args)
    ;; Ignore the args to `magit-checkout'.
    (projectile-invalidate-cache nil))
  (advice-add 'magit-checkout
              :after #'run-projectile-invalidate-cache)
  (advice-add 'magit-branch-and-checkout ; This is `b c'.
              :after #'run-projectile-invalidate-cache)

  ; enable quiting magit "transient" pop-ups using q
  (with-eval-after-load 'transient
    (transient-bind-q-to-quit))

  ; Enable automatic refreshing of magit buffers
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)

  (with-eval-after-load "magit-diff"
    (define-key magit-hunk-section-map (kbd "<return>") 'magit-diff-visit-file-other-window)))
#+END_SRC
** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :after evil-collection
  :config
  (evil-collection-git-timemachine-setup)
  ; Bind evil leader keys
  (evil-leader/set-key "gt" 'git-timemachine))
#+END_SRC
** Forge
#+BEGIN_SRC emacs-lisp
(use-package forge
  :ensure t
  :after magit
  :init
  (evil-leader/set-key "gfbr" 'forge-browse-remote))
#+END_SRC
** String-inflection
#+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :ensure t)
#+END_SRC
** Uuidgen
#+begin_src emacs-lisp
(use-package uuidgen
  :ensure t
  :init
  ;; Bind evil-leader keys
  (evil-leader/set-key "iU4" 'uuidgen))
#+end_src
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1))
#+END_SRC
** Impatient mode
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :ensure t
  :init
  (evil-leader/set-key "mI" 'impatient-mode))
#+END_SRC
*** Custom impatient mode filters
markdown rendering
#+BEGIN_SRC emacs-lisp
(defun markdown-html (buffer)
  (princ (with-current-buffer buffer
    (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
  (current-buffer)))
#+END_SRC
** Restclient
#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :after evil-collection
  :init
  (evil-collection-restclient-setup)

  (evil-leader/set-key-for-mode 'restclient-mode
    "mn" 'restclient-jump-next
    "mp" 'restclient-jump-prev
    "ms" 'restclient-http-send-current-stay-in-window
    "mS" 'restclient-http-send-current
    "mr" 'restclient-http-send-current-raw
    "my" 'restclient-copy-curl-command))
#+end_src
** Ob-Restclient
#+begin_src emacs-lisp
(use-package ob-restclient
  :ensure t
  :after restclient
  :init
  ; Add restclient to org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)))

  ; Associate files with the .http extension with the major mode "restclient-mode"
  (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode)))
#+end_src
** Paradox
#+BEGIN_SRC emacs-lisp
(use-package paradox
   :ensure t)
#+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
(use-package ranger
  :ensure t
  :bind (:map ranger-mode-map
    ("C-h" . 'evil-window-left)
    ("C-j" . 'evil-window-down)
    ("C-k" . 'evil-window-up)
    ("C-l" . 'evil-window-right)
    ("+" . 'dired-create-directory))
  :init
  (setq ranger-show-literal nil)
  (setq ranger-show-hidden t) ; Show dotfiles
  (ranger-override-dired-mode t) ; Set ranger as default directory handler
  (setq ranger-cleanup-on-disable t) ; When ranger session closed - kill ranger buffer
  (setq ranger-modify-header nil) ; use default dired header - not custom ranger one

  ; Bind evil-leader keys
  (evil-leader/set-key
    "ar" 'ranger
    "ad" 'deer))
#+END_SRC
** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode)
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(with-eval-after-load 'simple (diminish `auto-fill-function))
#+END_SRC
** Misc functions
Reload emacs config
#+BEGIN_SRC emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+END_SRC

Copy absolute file path to clipboard
#+BEGIN_SRC emacs-lisp
(defun copy-abs-file-path-to-clipboard ()
  "copy the absolute file path of current open file to the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC

Open emacs init file
#+BEGIN_SRC emacs-lisp
(defun find-emacs-init-file ()
  "Edit the 'emacs-init-file', in another window."
  (interactive)
  (find-file "~/.emacs.d/init.el.org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun git-reset-common-ancestor ()
  "Runs external shell command (using compile) which resets to common git commit ancestor"
  (interactive)
  (shell-command "git roa")
  (mmagit-refresh))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun git-reset-origin-current-branch ()
  "git reset to origin version of current branch"
  (interactive)
  (shell-command "git rob")
  (magit-refresh))
#+END_SRC

Rename current file/buffer
source: https://sites.google.com/site/steveyegge2/my-dot-emacs-file
#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
	  (projectile-cache-current-file)
      (projectile-invalidate-cache nil))))))
#+END_SRC

Delete current buffer and the file it has open
source: https://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/
#+BEGIN_SRC emacs-lisp
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (progn
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))
#+END_SRC

Disable all minor modes in current buffer
#+BEGIN_SRC emacs-lisp
(defun disable-all-minor-modes ()
  (interactive)
  (mapc
   (lambda (mode-symbol)
     (when (functionp mode-symbol)
       ;; some symbols are functions which aren't normal mode functions
       (ignore-errors
         (funcall mode-symbol -1))))
     minor-mode-list))
#+END_SRC

Fn to revert current buffer w/o prompting for confirmation
#+BEGIN_SRC emacs-lisp
;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+END_SRC

Switch to minibuffer window
#+BEGIN_SRC emacs-lisp
(defun switch-to-minibuffer-window ()
  "switch to minibuffer window (if active)"
  (interactive)
  (when (active-minibuffer-window)
    (select-window (active-minibuffer-window))))
#+END_SRC

Fn to call imenu/semantic/org-goto depending on mode
Pinched from spacemacs
#+begin_src emacs-lisp
(defun counsel-jump-in-buffer ()
  "Jump in buffer using imenu or semantic or org-goto"
  (interactive)
  (call-interactively
   (cond
    ((eq major-mode 'org-mode) 'counsel-org-goto)
    (t 'counsel-semantic-or-imenu))))
#+end_src

Fn to toggle auto exporting reveal.js html pages on save
#+begin_src emacs-lisp
(defun toggle-org-reveal-html-export-on-save ()
  (interactive)
  (if (memq 'org-reveal-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-reveal-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-reveal-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))
#+end_src

Fn to toggle auto exporting current org subtree to reveal.js on save
#+begin_src emacs-lisp
(defun toggle-org-reveal-current-subtree-html-export-on-save ()
  (interactive)
  (if (memq 'org-reveal-export-current-subtree after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-reveal-export-current-subtree t)
        (message "Disabled org html export current subtree on save for current buffer..."))
    (add-hook 'after-save-hook 'org-reveal-export-current-subtree nil t)
    (message "Enabled org html export current subtree on save for current buffer...")))
#+end_src

Run swiper with currently selected region or symbol
#+begin_src emacs-lisp
(defun swiper-region-or-symbol ()
  "Run `swiper' with the selected region or the symbol
  around point as the initial input."
  (interactive)
  (let ((input (if (region-active-p)
                   (buffer-substring-no-properties
                    (region-beginning) (region-end))
                 (thing-at-point 'symbol t))))
    (evil-magit-maybe-deactivate-mark)
    (swiper input)))
#+end_src

Run swiper-all with currently selected region or symbol
#+begin_src emacs-lisp
(defun swiper-all-region-or-symbol ()
  "Run `swiper-all' with the selected region or the symbol
  around point as the initial input."
  (interactive)
  (let ((input (if (region-active-p)
                   (buffer-substring-no-properties
                    (region-beginning) (region-end))
                 (thing-at-point 'symbol t))))
    (evil-magit-maybe-deactivate-mark)
    (swiper-all input)))
#+end_src

Run counsel-rg with currently selected region or symbol
#+begin_src emacs-lisp
(defun counsel-rg-region-or-symbol ()
  "Run `counsel-rg' with the selected region or the symbol
  around point as the initial input."
  (interactive)
  (let ((input (if (region-active-p)
                   (buffer-substring-no-properties
                    (region-beginning) (region-end))
                 (thing-at-point 'symbol t))))
    (evil-magit-maybe-deactivate-mark)
    (counsel-rg input)))
#+end_src

Run counsel-projectile-rg with currently selected region or symbol
#+begin_src emacs-lisp
(defun counsel-projectile-rg-region-or-symbol ()
  "Run `counsel-projectile-rg' with the selected region or the symbol
  around point as the initial input."
  (interactive)
  (let ((input (if (region-active-p)
                   (buffer-substring-no-properties
                    (region-beginning) (region-end))
                 (thing-at-point 'symbol t))))
    (evil-magit-maybe-deactivate-mark)
    (setq counsel-projectile-rg-initial-input input)
    (counsel-projectile-rg)))
#+end_src

Wrapper fn over counsel-projectile-rg - sets initial input of the command to nil before invoking
#+begin_src emacs-lisp
(defun counsel-projectile-rg-nil-initial-input ()
  "Run `counsel-projectile-rg' with the selected region or the symbol
  around point as the initial input. Also set initial input to nil before invoking"
  (interactive)
  (setq counsel-projectile-rg-initial-input nil)
  (counsel-projectile-rg))
#+end_src
